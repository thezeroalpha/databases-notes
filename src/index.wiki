%% vim: relativenumber nospell spelllang=en_gb spellcapcheck=:
%template math
= Databases =
Slides are [[http://joerg.endrullis.de/databases/|here]]

- [[kind-of-a-syllabus#Kind of a syllabus|Kind of a syllabus]]
- [[introduction#Introduction|Introduction]]
  - [[introduction#Introduction#Relational databases|Relational databases]]
  - [[introduction#Introduction#Database management system|Database management system]]
  - [[introduction#Introduction#SQL: Structured Query Language|SQL: Structured Query Language]]
- [[the-relational-model#The relational model|The relational model]]
  - [[the-relational-model#The relational model#Concepts: schema, state|Concepts: schema, state]]
    - [[the-relational-model#The relational model#Concepts: schema, state#Data types|Data types]]
    - [[the-relational-model#The relational model#Concepts: schema, state#Relation schema|Relation schema]]
    - [[the-relational-model#The relational model#Concepts: schema, state#Tuples|Tuples]]
    - [[the-relational-model#The relational model#Concepts: schema, state#Database states|Database states]]
  - [[the-relational-model#The relational model#Null values|Null values]]
  - [[the-relational-model#The relational model#Constraints|Constraints]]
  - [[the-relational-model#The relational model#Keys|Keys]]
    - [[the-relational-model#The relational model#Keys#Foreign keys|Foreign keys]]
- [[database-design-conceptual-models#Database design: Conceptual models|Database design: Conceptual models]]
  - [[database-design-conceptual-models#Database design: Conceptual models#Conceptual models: Entity-Relationship & UML|Conceptual models: Entity-Relationship & UML]]
    - [[database-design-conceptual-models#Database design: Conceptual models#Conceptual models: Entity-Relationship & UML#Entity sets|Entity sets]]
      - [[database-design-conceptual-models#Database design: Conceptual models#Conceptual models: Entity-Relationship & UML#Entity sets#Weak entity sets|Weak entity sets]]
    - [[database-design-conceptual-models#Database design: Conceptual models#Conceptual models: Entity-Relationship & UML#Relationship sets|Relationship sets]]
    - [[database-design-conceptual-models#Database design: Conceptual models#Conceptual models: Entity-Relationship & UML#Is-a (inheritance)|Is-a (inheritance)]]
    - [[database-design-conceptual-models#Database design: Conceptual models#Conceptual models: Entity-Relationship & UML#Aggregation|Aggregation]]
    - [[database-design-conceptual-models#Database design: Conceptual models#Conceptual models: Entity-Relationship & UML#Summary|Summary]]
  - [[database-design-conceptual-models#Database design: Conceptual models#UML vs ER|UML vs ER]]
- [[conceptual-to-relational-models#Conceptual to relational models|Conceptual to relational models]]
- [[sql-overview#SQL Overview|SQL Overview]]
  - [[sql-overview#SQL Overview#Basics|Basics]]
  - [[sql-overview#SQL Overview#Subqueries & non-monotonic constructs|Subqueries & non-monotonic constructs]]
- [[aggregations#Aggregations|Aggregations]]
- [[union-conditionals#Union, conditionals|Union, conditionals]]
- [[order-by#Order by|Order by]]
- [[joins#Joins|Joins]]
- [[relational-normal-forms#Relational normal forms|Relational normal forms]]
  - [[relational-normal-forms#Relational normal forms#Functional dependencies|Functional dependencies]]
    - [[relational-normal-forms#Relational normal forms#Functional dependencies#What is a functional dependency?|What is a functional dependency?]]
    - [[relational-normal-forms#Relational normal forms#Functional dependencies#Working with functional dependencies|Working with functional dependencies]]
    - [[relational-normal-forms#Relational normal forms#Functional dependencies#How to determine keys|How to determine keys]]
    - [[relational-normal-forms#Relational normal forms#Functional dependencies#Determinants|Determinants]]
    - [[relational-normal-forms#Relational normal forms#Functional dependencies#Consequences of bad database design|Consequences of bad database design]]
  - [[relational-normal-forms#Relational normal forms#Normal forms|Normal forms]]
    - [[relational-normal-forms#Relational normal forms#Normal forms#Boyce-Codd Normal Form (BCNF)|Boyce-Codd Normal Form (BCNF)]]
      - [[relational-normal-forms#Relational normal forms#Normal forms#Boyce-Codd Normal Form (BCNF)#Splitting relations|Splitting relations]]
      - [[relational-normal-forms#Relational normal forms#Normal forms#Boyce-Codd Normal Form (BCNF)#Synthesis|Synthesis]]
    - [[relational-normal-forms#Relational normal forms#Normal forms#Third normal form (3NF)|Third normal form (3NF)]]
      - [[relational-normal-forms#Relational normal forms#Normal forms#Third normal form (3NF)#Synthesis|Synthesis]]
  - [[relational-normal-forms#Relational normal forms#MVD & 4NF|MVD & 4NF]]
    - [[relational-normal-forms#Relational normal forms#MVD & 4NF#Multivalued dependencies (MVDs)|Multivalued dependencies (MVDs)]]
    - [[relational-normal-forms#Relational normal forms#MVD & 4NF#Fourth Normal Form (4NF)|Fourth Normal Form (4NF)]]
  - [[relational-normal-forms#Relational normal forms#Normal forms & ER design|Normal forms & ER design]]
  - [[relational-normal-forms#Relational normal forms#Denormalization|Denormalization]]
- [[transactions#Transactions|Transactions]]
  - [[transactions#Transactions#Schedules|Schedules]]
  - [[transactions#Transactions#Serializability|Serializability]]
  - [[transactions#Transactions#Runtime serializability strategies|Runtime serializability strategies]]
    - [[transactions#Transactions#Runtime serializability strategies#Pessimistic: lock-based, two phase locking|Pessimistic: lock-based, two phase locking]]
      - [[transactions#Transactions#Runtime serializability strategies#Pessimistic: lock-based, two phase locking#Deadlock handling|Deadlock handling]]
      - [[transactions#Transactions#Runtime serializability strategies#Pessimistic: lock-based, two phase locking#Cascading rollbacks|Cascading rollbacks]]
      - [[transactions#Transactions#Runtime serializability strategies#Pessimistic: lock-based, two phase locking#Strict 2 phase locking|Strict 2 phase locking]]
      - [[transactions#Transactions#Runtime serializability strategies#Pessimistic: lock-based, two phase locking#Preclaiming 2 phase locking|Preclaiming 2 phase locking]]
      - [[transactions#Transactions#Runtime serializability strategies#Pessimistic: lock-based, two phase locking#Granularity of locking|Granularity of locking]]
      - [[transactions#Transactions#Runtime serializability strategies#Pessimistic: lock-based, two phase locking#Optimising performance|Optimising performance]]
      - [[transactions#Transactions#Runtime serializability strategies#Pessimistic: lock-based, two phase locking#Isolation levels|Isolation levels]]
    - [[transactions#Transactions#Runtime serializability strategies#Optimistic concurrency control|Optimistic concurrency control]]
      - [[transactions#Transactions#Runtime serializability strategies#Optimistic concurrency control#Validation|Validation]]
      - [[transactions#Transactions#Runtime serializability strategies#Optimistic concurrency control#Multiversion concurrency control|Multiversion concurrency control]]
- [[database-application-programming#Database Application Programming|Database Application Programming]]
  - [[database-application-programming#Database Application Programming#Dynamic|Dynamic]]
    - [[database-application-programming#Database Application Programming#Dynamic#JDBC|JDBC]]
    - [[database-application-programming#Database Application Programming#Dynamic#SQL injection|SQL injection]]
    - [[database-application-programming#Database Application Programming#Dynamic#Impedance mismatch|Impedance mismatch]]
    - [[database-application-programming#Database Application Programming#Dynamic#Object Relational Mapping|Object Relational Mapping]]
      - [[database-application-programming#Database Application Programming#Dynamic#Object Relational Mapping#ADO.NET entity framework|ADO.NET entity framework]]
      - [[database-application-programming#Database Application Programming#Dynamic#Object Relational Mapping#LinQ|LinQ]]
